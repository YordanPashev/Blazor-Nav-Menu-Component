@page "/weather"
@attribute [StreamRendering]

<NavMenuLayout MenuButtonsData="weatherNavBarButtons" />

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<MenuButton> weatherNavBarButtons =
    [
        new MenuButton("Refresh ↺", new List<MenuItem>()),
        new MenuButton("Settings", new List<MenuItem>
                                   {
                                       new MenuItem
                                       {
                                           Text = "Select Options",
                                           Children = new List<MenuItem>
                                           {
                                              new MenuItem { Text = "Change Location" },
                                              new MenuItem
                                              {
                                                  Text = "Select Temperature scales",
                                                  Children =  new List<MenuItem>
                                                  {
                                                      new MenuItem { Text = "Fahrenheit" },
                                                      new MenuItem { Text = "Celsius" },
                                                      new MenuItem { Text = "Kelvin" },
                                                  }
                                              },
                                           }
                                       },
                                       new MenuItem
                                       {
                                           Text = "Refresh Interval",
                                           Children =  new List<MenuItem>
                                           {
                                               new MenuItem { Text = "5 min" },
                                               new MenuItem { Text = "15 min" },
                                               new MenuItem { Text = "30 m" },
                                               new MenuItem { Text = "1 h" },
                                               new MenuItem { Text = "3 h" },
                                               new MenuItem { Text = "6 h" },
                                               new MenuItem { Text = "24 h" },
                                           }
                                       },
                                       new MenuItem { Text = "Reset settings" },
                                   }),
    ];

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
